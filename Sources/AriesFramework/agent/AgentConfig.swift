
import Foundation

let DID_COMM_TRANSPORT_QUEUE = "didcomm:transport/queue"

public struct AgentConfig: Codable {
    public init(
        walletId: String = "AFSDefaultWallet",
        walletKey: String,
        genesisPath: String,
        mediatorConnectionsInvite: String? = nil,
        mediatorPickupStrategy: MediatorPickupStrategy = .PickUpV1,
        label: String = "SwiftFrameworkAgent",
        autoAcceptConnections: Bool = true,
        mediatorPollingInterval: TimeInterval = 10,
        mediatorEmptyReturnRetryInterval: TimeInterval = 3,
        connectionImageUrl: String? = nil,
        autoAcceptCredential: AutoAcceptCredential = .always,
        autoAcceptProof: AutoAcceptProof = .always,
        ignoreRevocationCheck: Bool = false,
        useLedgerService: Bool = true,
        useLegacyDidSovPrefix: Bool = true,
        preferredHandshakeProtocol: HandshakeProtocol = .Connections,
        publicDidSeed: String? = nil,
        agentEndpoints: [String]? = nil) {

        self.walletId = walletId
        self.walletKey = walletKey
        self.genesisPath = genesisPath
        self.mediatorConnectionsInvite = mediatorConnectionsInvite
        self.mediatorPickupStrategy = mediatorPickupStrategy
        self.label = label
        self.autoAcceptConnections = autoAcceptConnections
        self.mediatorPollingInterval = mediatorPollingInterval
        self.mediatorEmptyReturnRetryInterval = mediatorEmptyReturnRetryInterval
        self.connectionImageUrl = connectionImageUrl
        self.autoAcceptCredential = autoAcceptCredential
        self.autoAcceptProof = autoAcceptProof
        self.ignoreRevocationCheck = ignoreRevocationCheck
        self.useLedgerService = useLedgerService
        self.useLegacyDidSovPrefix = useLegacyDidSovPrefix
        self.preferredHandshakeProtocol = preferredHandshakeProtocol
        self.publicDidSeed = publicDidSeed
        self.agentEndpoints = agentEndpoints
    }

    // Mandatory fields

    /// RAW key generated by ``Agent.generateWalletKey()``. This is the key used to encrypt the wallet and should be stored securely.
    public var walletKey: String
    /// File path to the genesis file for the indy ledger.
    public var genesisPath: String

    // Optional fields

    /// The wallet id to identify the wallet in an App.
    public var walletId: String
    /// The invite url for the mediator.
    public var mediatorConnectionsInvite: String?
    /// The strategy for picking up message from the mediator.
    public var mediatorPickupStrategy: MediatorPickupStrategy
    /// The label for the agent.
    public var label: String
    /// Whether to automatically accept connections. Default is true.
    public var autoAcceptConnections: Bool
    /// The interval in seconds to poll the mediator for messages. Default is 10 seconds.
    public var mediatorPollingInterval: TimeInterval
    /// The interval in seconds to pickup messages if the outbound transport's response is empty. Default is 3 seconds.
    public var mediatorEmptyReturnRetryInterval: TimeInterval
    /// The image url to use for the connection.
    public var connectionImageUrl: String?
    /// Whether to automatically accept credentials. Default is `.always`.
    public var autoAcceptCredential: AutoAcceptCredential
    /// Whether to automatically accept proof requests. Default is `.always`.
    public var autoAcceptProof: AutoAcceptProof
    /// Whether to use the ledger service. Default is true.
    public var useLedgerService: Bool
    /// Whether to use the legacy did sov prefix. Default is true.
    public var useLegacyDidSovPrefix: Bool
    /// The preferred handshake protocol to use. Default is `.Connections`.
    public var preferredHandshakeProtocol: HandshakeProtocol

    // For testing

    /// The seed to use for the public did. The public did is used to register items on the ledger.
    public var publicDidSeed: String?
    /// The agent endpoints to use for testing.
    public var agentEndpoints: [String]?
    /// Whether to ignore revocation checks when creating a presentation. Default is false.
    public var ignoreRevocationCheck: Bool

    /// The endpoints of the agent. Read only.
    public var endpoints: [String] {
        return agentEndpoints ?? [DID_COMM_TRANSPORT_QUEUE]
    }
}
